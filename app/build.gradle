plugins {
    alias(libs.plugins.android.application)
    // alias(libs.plugins.kotlin)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.kapt)
    alias(libs.plugins.kotlin.parcelize)
    alias(libs.plugins.devtools.ksp)
}

android {
    namespace 'com.example.fe.myapplication'
    compileSdk 34

    defaultConfig {
        applicationId "com.example.fe.myapplication"
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", "API_KEY", "\"debug_api_key\""
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", "API_KEY", "\"release_api_key\""
        }
    }
    // 定义 flavor dimensions
    flavorDimensions "environment"
    productFlavors {
        qa {
            dimension "environment"
            versionCode rootProject.ext.android["cyyVersionCode"]
            versionName rootProject.ext.android["cyyVersionName"]
            resValue "string", "app_name", "测试环境app"
            applicationIdSuffix ".qa"
            versionNameSuffix ".qa"
            buildConfigField "Boolean", "DEBUG", "true"
            buildConfigField 'String', 'PRODUCT_FLAVORS', '"qa"'
            buildConfigField 'String', 'THE_KEY', '"xxx"'
            buildConfigField 'String', 'APP_VERSION_BACKEND', '"9.9.9.gate.common"'
            buildConfigField 'String', 'CLOUD_BASE_URL_DESC', '"测试域名"'
            buildConfigField 'String', 'CLOUD_BASE_URL', '"http://192.168.1.4:30000/fhl_acsapi/"'
            manifestPlaceholders = [PACKAGE_NAME: defaultConfig.applicationId + applicationIdSuffix]
        }
        online {
            dimension "environment"
            versionCode rootProject.ext.android["testVersionCode"]
            versionName rootProject.ext.android["testVersionName"]
            resValue "string", "app_name", "生产环境app"
            buildConfigField "Boolean", "DEBUG", "false"
            buildConfigField 'String', 'THE_KEY', '"xxxx"'
            // 后端环境目前最高支持版本为2.0.9，临时处理
            buildConfigField 'String', 'APP_VERSION_BACKEND', '"2.0.9"'
            buildConfigField 'String', 'CLOUD_BASE_URL_DESC', '"云端域名"'
            buildConfigField 'String', 'CLOUD_BASE_URL', '"https://192.168.1.4:30000/fhl_acsapi/"'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        buildConfig true
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.3'
    }
    packaging {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    implementation libs.fresco
    implementation libs.multidex

    // 键值对存储
    implementation libs.mmkv.static

    implementation libs.androidx.compose.foundation

    // Retrofit
    implementation libs.retrofit
    // 用于将 JSON 转换为 Kotlin 对象
    implementation libs.converter.gson
    // 可选：用于调试网络请求
    implementation libs.logging.interceptor

    // Paging 3
    // 删除 androidx-paging-compose-android，它是不必要的
    implementation libs.androidx.paging.compose
    implementation libs.androidx.paging.runtime

    // Room
    implementation libs.androidx.room.runtime
    implementation libs.androidx.room.paging
    // kapt libs.androidx.room.compiler
    ksp libs.androidx.room.compiler
    implementation libs.androidx.room.ktx

    implementation libs.kotlinx.coroutines.core
    implementation libs.kotlinx.coroutines.android

    implementation libs.androidx.navigation.compose

    // Lifecycle
    implementation libs.androidx.lifecycle.viewmodel.compose
    implementation libs.androidx.lifecycle.runtime.ktx

    implementation libs.androidx.core.ktx
    implementation libs.androidx.activity.compose
    implementation platform(libs.androidx.compose.bom)
    implementation libs.androidx.ui
    implementation libs.androidx.ui.graphics
    implementation libs.androidx.ui.tooling.preview
    // implementation libs.androidx.material3
    implementation libs.androidx.material
    implementation libs.androidx.runtime.livedata
    implementation libs.coil.compose
    // testImplementation libs.junit
    // androidTestImplementation libs.androidx.junit
    // androidTestImplementation libs.androidx.espresso.core
    // androidTestImplementation platform(libs.androidx.compose.bom)
    // androidTestImplementation libs.androidx.ui.test.junit4
    debugImplementation libs.androidx.ui.tooling
    // debugImplementation libs.androidx.ui.test.manifest
}